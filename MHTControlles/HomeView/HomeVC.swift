//
//  homeVC.swift
//  MHTLabelPrinter
//
//  Created by Á®ãÈ™ã on 2017/12/27.
//  Copyright ¬© 2017Âπ¥ MHT. All rights reserved.
//

import UIKit

class HomeVC: UIViewController {
    @IBOutlet weak var addLabelL: UIButton!
    @IBOutlet weak var printLabelL: UILabel!
    @IBOutlet weak var quickPrintL: UILabel!
    @IBOutlet weak var labelModelL: UILabel!
    @IBOutlet weak var newLabelL: UILabel!
    @IBOutlet weak var bluetoothL: UIButton!
    @IBOutlet weak var templateView: UIImageView!
    @IBOutlet weak var editButton: UIButton!
    @IBOutlet weak var bottomChannelView: UIView!
    
    // ÊúÄÂêé‰øùÂ≠òÁöÑÊ®°ÊùøÂØπË±°
    var dataSource: TemplateModel?
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // ÂàõÂª∫Ê≤ôÁõíÊ®°ÊùøÊñá‰ª∂Â§π
        print("document path: " + MHTBase.getTemplateDocumentPath())
        
        // Êê≠Âª∫UI
        setHomeNavUI()
        
        // ËØªÂèñÊúÄÂêéÁºñËæëÁöÑÊ®°Êùø
        self.getLatestSaveFile()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let mm = mapleButton()
        mm.intervalSpace = 30
        mm.typeNum = 3
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅÂØºËà™
    func setHomeNavUI() {
        addLabelL.titleLabel?.adjustsFontSizeToFitWidth = true
        bluetoothL.titleLabel?.adjustsFontSizeToFitWidth = true
        quickPrintL.font = UIFont.systemFont(ofSize: CGFloat(14*MHTBase.autoScreen()))
        labelModelL.font = UIFont.systemFont(ofSize: CGFloat(14*MHTBase.autoScreen()))
        printLabelL.font = UIFont.systemFont(ofSize: CGFloat(14*MHTBase.autoScreen()))
        newLabelL.font = UIFont.systemFont(ofSize: CGFloat(14*MHTBase.autoScreen()))

        self.title = MHTBase.internationalStringWith(str: "MHTLabel")
        let navRBtn = UIBarButtonItem.init(image: UIImage.init(named: "navHomeSet"), style: .plain, target: self, action: #selector(self.homeRBtnEvent))
        self.navigationItem.rightBarButtonItem = navRBtn
    }
    
    @objc func homeRBtnEvent() {
        self.navigationController?.pushViewController(setViewController(), animated: true)
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅÁÇπÂáªÂ±èÂπïÂàõÂª∫Ê†áÁ≠æ
    @IBAction func creatLabelBtn(_ sender: UIButton) {
        self.navigationController?.pushViewController(AddLabelViewController(), animated: true)
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅËøûÊé•ËìùÁâô
    @IBAction func linkBluetoothBtn(_ sender: UIButton) {
        self.navigationController?.pushViewController(BluetoothMVC(), animated: true)
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅÊñ∞Âª∫Ê†áÁ≠æ
    @IBAction func addLabelBtn(_ sender: UIButton) {
        self.dataSource = nil
        self.gotoEditTemplateVC()
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅÊâìÂç∞Ê†áÁ≠æ
    @IBAction func printLabelBtn(_ sender: UIButton) {
        if nil == FzhBluetooth.shareInstance().serviceArr || 0 >= FzhBluetooth.shareInstance().serviceArr.count {
            self.navigationController?.pushViewController(BluetoothMVC(), animated: true)
        } else {
            // Âà§Êñ≠ÊòØÂê¶ÊúâÊúÄËøëÁºñËæëÊ†áÁ≠æ
            if nil != self.dataSource && nil != self.dataSource?.labelViewBack {
                // ÊâìÂç∞
//                var imageString = self.dataSource?.labelViewBack!
//                imageString = imageString?.replacingOccurrences(of: "\n", with: "")
                
                /**
                 * ÊµãËØïÊâìÂç∞Â≠óÁ¨¶‰∏≤
                 * ÊâìÂç∞ÂÆåÊï¥ÁöÑAndroid‰ª£Á†ÅÊòØPrintfManagerÁöÑrealPrintfBitmapByLabelViewÊñπÊ≥ï
                
                 * ÊâìÂç∞ÁöÑÊåá‰ª§ÈõÜÊòØTSCLÊñáÊ°£„ÄÇ‰∏ÄËà¨Áî®Âà∞ÁöÑÊòØ‰ª•‰∏ãÊåá‰ª§Ôºö
                 * Á¨¨‰∏ÄÊ≠•ÔºöÂàùÂßãÂåñÁîªÂ∏É---> SIZE w(ÁîªÂ∏ÉÁöÑÂÆΩÂ∫¶) mm,h(ÁîªÂ∏ÉÁöÑÈ´òÂ∫¶) mm\r\n
                 * Á¨¨‰∫åÊ≠•ÔºöÊ∏ÖÈô§ÁîªÂ∏É---> CLS\r\n
                 * Á¨¨‰∏âÊ≠•ÔºöÂèëÈÄÅÊâìÂç∞Êï∞ÊçÆ---> BITMAP -8,0,w(ÂõæÁâáÁöÑÂÆΩÂ∫¶)/8,h(ÂõæÁâáÁöÑÈ´òÂ∫¶),1,Âä†‰∏ä ÂõæÁâáÁöÑ‰∫åÂÄºÂåñÊï∞ÊçÆ
                 * ËøôÈáåÊàë‰ª¨Âè™ÈúÄË¶ÅÊääÊ†áÁ≠æÁöÑÂõæÁâáÂèëÈÄÅËøáÂéªÂç≥ÂèØ„ÄÇÂèëÈÄÅÊ†áÁ≠æÊï∞ÊçÆ‰πãÂêéÔºåÈúÄË¶ÅÂèëÈÄÅ(\r\n),ÂëäËØâÊâìÂç∞Êú∫ÔºåËøôÊù°ÂëΩ‰ª§ÁªìÊùü
                 * Á¨¨ÂõõÊ≠•ÔºöÂºÄÂßãÊâìÂç∞---> PRINT 1,number(Ê≠§‰∏∫ÂèòÈáèÔºåÊòØÊâìÂç∞ÁöÑÂº†Êï∞) \r\n
                 * Ê≥®Ôºö---> ÂêéÈù¢ÊòØÂØπÂ∫îÁöÑÊåá‰ª§,Êã¨Âè∑ÈáåÈù¢ÁöÑ‰∏≠ÊñáÊòØÂØπÂèòÈáèÁöÑËØ¥ÊòéÔºåÈÄóÂè∑ÈÉΩÊòØËã±Êñá„ÄÇ
                 */
//                let imageString = "SIZE 40 mm,30 mm\r\nCLS\r\nTEXT 10,10,\"0\",0,12,12,\"TSPL 2\"\r\nPRINT 1,1\r\n"
//                let utf8EncodeData = imageString.data(using: String.Encoding.utf8, allowLossyConversion: true)
//
//                // Â∞ÜNSDataËøõË°åBase64ÁºñÁ†Å
//                let base64String = utf8EncodeData?.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: UInt(0)))
                
//                let byteArray: [UInt8] = Array(imageString.utf8)
//                let printData = Data.init(bytes: byteArray)
//                FzhBluetooth.shareInstance().write(printData, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })

//                FzhBluetooth.shareInstance().writeValue(imageString, for: nil, completionBlock: {(ch, err) in
//                    ToastView.instance.showToast(content: MHTBase.internationalStringWith(str: "Â∑≤ÊâìÂç∞"))
//                }, return: { (peri, ch, dataString, err) in
//                    ToastView.instance.showToast(content: MHTBase.internationalStringWith(str: "ÊâìÂç∞Â§±Ë¥•"))
//                    print(err as Any)
//                })
                
//                let byteArray = [0x0d, 0x0a]
//                let byteData = Data(bytes: byteArray, count: byteArray.count)
//
                let imageString1 = "SIZE 40 mm,30 mm\r\n"
                FzhBluetooth.shareInstance().writeValue(imageString1, for: nil, completionBlock: {(ch, err) in

                }, return: { (peri, ch, dataString, err) in

                })
//
//                FzhBluetooth.shareInstance().write(byteData, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })

                let imageString2 = "CLS\r\n"
                FzhBluetooth.shareInstance().writeValue(imageString2, for: nil, completionBlock: {(ch, err) in

                }, return: { (peri, ch, dataString, err) in

                })
//
//                FzhBluetooth.shareInstance().write(byteData, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })

//                let imageString3 = "TEXT 80,80,\"0\",0,32,32,\"TSPL 2\"\r\n"
//                let imageString3 = "BAR 80,80,300,100\r\n"
                var imageString = (self.dataSource?.labelViewBack)!
                imageString = imageString.replacingOccurrences(of: "\n", with: "")
                let base64 = Data(base64Encoded: imageString)
                let image = UIImage.init(data: base64!)
                let imageData = UIImagePNGRepresentation(image!)
//                let printImageString = String.init(data: imageData!, encoding: String.Encoding.utf8)!
//                let imageString3 = "BITMAP 10,10,400,300,0," + printImageString + "\r\n"
                let imageString3 = "BITMAP 10,10,400,300,0,"
                FzhBluetooth.shareInstance().writeValue(imageString3, for: nil, completionBlock: {(ch, err) in

                }, return: { (peri, ch, dataString, err) in

                })
                
                FzhBluetooth.shareInstance().write(imageData, for: nil, completionBlock: {(ch, err) in

                }, return: { (peri, ch, dataString, err) in

                })
                
                let imageString31 = "\r\n"
                FzhBluetooth.shareInstance().writeValue(imageString31, for: nil, completionBlock: {(ch, err) in
                    
                }, return: { (peri, ch, dataString, err) in
                    
                })
                
//                let byteArray = [66,73,84,77,65,80,32,49,48,48,44,49,48,48,44,50,44,49,54,44,49,44,0xfd,0x7f,0xf8,0x3f, 0xf0,0x0f, 0xe1,0x07,0xc3, 0x83, 0x87, 0xe1,0x0f,0xf1,0x1f,0xf0,0x1e, 0xf8,0x1c,0x38,0x00,0x00,0x00,0x00, 0xc1,0x83,0xff,0xff, 0xff,0xff, 0xff, 0xff,0x0d,0x0a]
//                let printData = Data.init(bytes: byteArray, count: byteArray.count)
////                let printData = self.dataSource?.labelViewBack?.data(using: .utf8)
//                FzhBluetooth.shareInstance().write(printData, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })
//
//                let imageString5 = "\r\n"
//                FzhBluetooth.shareInstance().writeValue(imageString5, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })

                let imageString4 = "PRINT 1,1\r\n"
                FzhBluetooth.shareInstance().writeValue(imageString4, for: nil, completionBlock: {(ch, err) in

                }, return: { (peri, ch, dataString, err) in

                })
//
//                FzhBluetooth.shareInstance().write(byteData, for: nil, completionBlock: {(ch, err) in
//
//                }, return: { (peri, ch, dataString, err) in
//
//                })
                
//                let imageString5 = self.dataSource?.labelViewBack
//                FzhBluetooth.shareInstance().writeValue(imageString5, for: nil, completionBlock: {(ch, err) in
//                    ToastView.instance.showToast(content: MHTBase.internationalStringWith(str: "Â∑≤ÊâìÂç∞"))
//                }, return: { (peri, ch, dataString, err) in
//                    ToastView.instance.showToast(content: MHTBase.internationalStringWith(str: "ÊâìÂç∞Â§±Ë¥•"))
//                    print(err as Any)
//                })
            } else {
                self.navigationController?.pushViewController(BluetoothMVC(), animated: true)
            }
        }
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅÂø´ÈÄüÊâìÂç∞
    @IBAction func quickPrintBtn(_ sender: UIButton) {
        self.navigationController?.pushViewController(QuickPrintVC(), animated: true)
    }
    
    //maple_mark-------üçÅüçÅüçÅüçÅüçÅüçÅ‰æøÁ≠æÊ®°Áâà
    @IBAction func labelModelBtn(_ sender: UIButton) {
        self.navigationController?.pushViewController(LabelModelViewController(), animated: true)
    }
    
    // ËØªÂèñÊúÄÂêéÁºñËæë‰øùÂ≠òÁöÑÊ®°Êùø
    func getLatestSaveFile() -> Void {
        // Ê∏ÖÁ©∫ÂéüÊù•Êï∞ÊçÆ
        for subView in self.templateView.subviews {
            subView.removeFromSuperview()
        }
        
        // ‰øùÂ≠òÊúÄÂêéÁºñËæëÁöÑÊ®°Êùø
        let userDefault = UserDefaults.standard
        let filePathRelative = userDefault.string(forKey: SAVE_LATEST_FILE_PATH_KEY_NAME)
        if(nil == filePathRelative || (filePathRelative?.isEmpty)!) {
            self.view.sendSubview(toBack: self.templateView)
            return
        }
        
        // Âà§Êñ≠Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        let fileManager = FileManager.default
        let filePath: String = MHTBase.getTemplateDocumentPath() + "/" + filePathRelative!
        let exist = fileManager.fileExists(atPath: filePath)
        if(!exist) {
            self.view.sendSubview(toBack: self.templateView)
            return
        }
        self.view.bringSubview(toFront: self.templateView)
        
        // ÊòæÁ§∫ÊúÄÊñ∞ÁöÑÊ®°Êùø
        let jsonDataTemp = NSData.init(contentsOfFile: filePath)
        let decoder = JSONDecoder()
        let templateModel = try! decoder.decode(TemplateModel.self, from: jsonDataTemp! as Data)
        self.dataSource = templateModel
        
        // ÈáçÊñ∞ËÆæÁΩÆÁºñËæëÁ™óÂè£Â∞∫ÂØ∏
        let pageWidth = templateModel.width! > Float(0) ? templateModel.width! : 48
        let pageHeight = templateModel.height! > Float(0) ? templateModel.height! : 30
        
        // Âà§Êñ≠ÂÆΩÈ´òÂì™‰∏™Âç†Êª°
        var viewHeight = CGFloat(0)
        var viewWidth = CGFloat(0)
        if(pageWidth > pageHeight) {
            let width = Float(SCREEN_width - 20)
            let height = width * pageHeight / pageWidth
            viewHeight = CGFloat(height)
            viewWidth = CGFloat(width)
        } else {
            let width = Float(SCREEN_width - 20)
            let height = width
            let widthNew = height * pageWidth / pageHeight
            viewHeight = CGFloat(height)
            viewWidth = CGFloat(widthNew)
        }
        
        // ÊòæÁ§∫ÁöÑÊ®°ÊùøÂõæÁâá
        let xpoint = (SCREEN_width - viewWidth) / 2
        let leftHeight = SCREEN_height - 64 - bottomChannelView.frame.height
        let ypoint = (leftHeight - viewHeight) / 2
        let tempImageView = UIImageView.init(frame: CGRect(x: xpoint, y: ypoint, width: viewWidth, height: viewHeight))
        tempImageView.isUserInteractionEnabled = true
        
        var imageString = templateModel.labelViewBack!
        imageString = imageString.replacingOccurrences(of: "\n", with: "")
        let base64 = Data(base64Encoded: imageString)
        tempImageView.image = UIImage(data: base64!)
        self.templateView.addSubview(tempImageView)
        
        // ÁÇπÂáªÊâãÂäø
        let tap = UITapGestureRecognizer.init(target: self, action: #selector(gotoEditTemplateVC))
        tap.numberOfTapsRequired = 1
        tap.numberOfTouchesRequired = 1
        tempImageView.addGestureRecognizer(tap)
    }
    
    // ËøõÂÖ•ÁºñËæëÁïåÈù¢
    @objc func gotoEditTemplateVC() {
        let vc = AddLabelViewController()
        if(nil != self.dataSource && !((self.dataSource?.labelName?.isEmpty)!)) {
            vc.dataSource = self.dataSource!
        }
        self.navigationController?.pushViewController(vc, animated: true)
    }
}
